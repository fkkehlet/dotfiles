# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f


# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash
cmd trash ${{
    set -f
    printf "$fx\n"
    printf "Trash? [y/N]"
    read ans
    [ "$ans" = "y" ] && mv $fx ~/.trash
}}

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "DELETE? [y/N]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '\' key for 'trash' command
map \\ trash
# map <delete> delete

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

map D mkdir

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
}}

map T mkfile
